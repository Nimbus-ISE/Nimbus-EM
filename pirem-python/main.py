import numpy as np

from functions.getSeqItSelection import getSeqItSelection
from functions.shortestDistanceMatrix import shortestDistanceMatrix

G = {'Points': [[54.71896683, 35.83201591],
                [97.66732821,  4.06563318],
                [39.70726083, 11.81767994],
                [49.81227702, 84.53045981],
                [7.68658817, 61.57264823],
                [87.50428642, 73.4474997],
                [89.13397142, 17.67413283],
                [86.05522385, 96.45949678],
                [6.55167548, 46.12616906],
                [30.84517646, 17.21150502],
                [46.89118748, 33.80001456],
                [39.76492288, 48.18288765],
                [62.28614444,  0.68493843],
                [44.97049757, 76.2699458],
                [29.05149311, 53.46970647],
                [59.56852808, 80.54430983]],
     'RatingsNodes': [0.03187582, 0.91022749, 0.10638796, 0.64013539, 0.93863349,
                      0.96377975, 0.68346919, 0.76424738, 0.15785645, 0.35904605,
                      0.08077735, 0.96713328, 0.48731494, 0.26667526, 0.38983965,
                      0.31869582],
     'AvCostNodes': [0, 3, 3, 4, 0, 2, 4, 2, 2, 1, 3, 4, 4, 0, 4, 2],
     'CategoriesNodes': [6, 4, 1, 8, 4, 2, 7, 3, 5, 8, 2, 1, 2, 7, 6, 2],
     'OpenHours': [[9, 14],
                   [[9, 14], [17, 21]],
                   [9, 24],
                   [14, 24],
                   [9, 14],
                   [12, 21],
                   [14, 24],
                   [9, 24],
                   [9, 14],
                   [14, 24],
                   [[9, 14], [17, 21]],
                   [12, 21],
                   [12, 21],
                   [12, 21],
                   [9, 24],
                   [12, 21]],
     'RatingsEdges': [0.37469442, 0.14630909, 0.26304936, 0.28460104, 0.85295203,
                      0.83061272, 0.30689124, 0.02865153, 0.70905649, 0.52226769,
                      0.22913224, 0.660405, 0.15477576, 0.6763715, 0.99724148,
                      0.93809741, 0.03354321, 0.88856741, 0.97336589, 0.65138605,
                      0.12632344, 0.11664141, 0.65146892, 0.76845241, 0.33408835,
                      0.17762719, 0.28944118, 0.8997732, 0.20510582, 0.06268458,
                      0.4094191, 0.00428738, 0.65254197, 0.17062007, 0.66656491,
                      0.85288259],
     'MinTimeNodes': [1, 0.5, 1, 1, 1, 0.5, 1, 1.5, 1, 0.25, 1.5, 1, 0.5, 0.5, 0.5, 1.5],
     'MinTimeEdges': [[0, 0, 0.1009676, 0, 0,
                      0.17789614, 0.13872719, 0, 0, 0,
                      0.02883258, 0.06914722, 0.12817777, 0, 0,
                      0.16034324],
                      [0, 0, 0, 0, 0,
                       0.25, 0.05726667, 0, 0, 0,
                       0, 0, 0.12671558, 0, 0,
                       0],
                      [0.1009676, 0, 0, 0, 0,
                       0, 0, 0, 0, 0.03698712,
                       0.0824504, 0, 0.08975136, 0, 0,
                       0],
                      [0, 0, 0, 0, 0.17104183,
                       0, 0, 0.13603257, 0, 0,
                       0, 0, 0, 0.03413649, 0,
                       0.03757422],
                      [0, 0, 0, 0.17104183, 0,
                       0, 0, 0, 0.05521826, 0,
                       0, 0, 0, 0.14287968, 0.08146442,
                       0],
                      [0.17789614, 0.25, 0, 0, 0,
                       0, 0.19892818, 0.08220491, 0, 0,
                       0, 0, 0, 0, 0,
                       0.10276018],
                      [0.13872719, 0.05726667, 0, 0, 0,
                       0.19892818, 0, 0, 0, 0,
                       0, 0, 0.11327239, 0, 0,
                       0],
                      [0, 0, 0, 0.13603257, 0,
                       0.08220491, 0, 0, 0, 0,
                       0, 0, 0, 0, 0,
                       0.11016637],
                      [0, 0, 0, 0, 0.05521826,
                       0, 0, 0, 0, 0.13464158,
                       0, 0, 0, 0, 0.08438083,
                       0],
                      [0, 0, 0.03698712, 0, 0,
                       0, 0, 0, 0.13464158, 0,
                       0.08228229, 0, 0, 0, 0.12942589,
                       0],
                      [0.02883258, 0, 0.0824504, 0, 0,
                       0, 0, 0, 0, 0.08228229,
                       0, 0.05722684, 0, 0, 0.09467283,
                       0],
                      [0.06914722, 0, 0, 0, 0,
                       0, 0, 0, 0, 0,
                       0.05722684, 0, 0, 0.10184134, 0.04259305,
                       0.1352638],
                      [0.12817777, 0.12671558, 0.08975136, 0, 0,
                       0, 0.11327239, 0, 0, 0,
                       0, 0, 0, 0, 0,
                       0],
                      [0, 0, 0, 0.03413649, 0.14287968,
                       0, 0, 0, 0, 0,
                       0, 0.10184134, 0, 0, 0.0991399,
                       0.05423007],
                      [0, 0, 0, 0, 0.08146442,
                       0, 0, 0, 0.08438083, 0.12942589,
                       0.09467283, 0.04259305, 0, 0.0991399, 0,
                       0],
                      [0.16034324, 0, 0, 0.03757422, 0,
                       0.10276018, 0, 0.11016637, 0, 0,
                       0, 0.1352638, 0, 0.05423007, 0,
                       0]],
    'N': 16}

# ITMETHOD = 0; # (Fast Sequential Itinerary Creation) with extra History  (M-PIREM) [1]
ITMETHOD = 1; # (Fast Sequential Itinerary Creation)  (PIREM) [1]

params = {}
params['DistTimes'] = shortestDistanceMatrix(G['MinTimeEdges']) # time-distance matrix of all pair of nodes
params['BestFO'] = 0
params['nodeStart'] = 7
params['nodeEnd'] = 13
params['timeStart'] = 10
params['timeEnd'] = 18
params['AvCostUser'] = 3
# Nmin = 0*Nmin
# Nmax = 0*Nmin+100
params['Nmin'] = [0] * 8 # minimum locations per category
params['Nmax'] = [2] * 8
params['Ntype'] = 0 # flexibility

params['EXP_MAX'] = 1
params['RUN_REMOVAL'] = 0

getSeqItSelection(G, params, ITMETHOD)